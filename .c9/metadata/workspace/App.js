{"changed":true,"filter":false,"title":"App.js","tooltip":"/App.js","value":"Ext.define(\"CustomApp\", {\n    extend: \"Rally.app.App\",\n    componentCls: \"app\",\n    items: [{\n        xtype: \"container\",\n        itemId: \"nav\",\n        id: \"nav\",\n        html: '<a href=\"#\" onClick=\"Rally.getApp().setStacking();return false;\">Change stacking type</a>'\n    }, {\n        xtype: \"container\",\n        itemId: \"filterContainer\",\n        id: \"filterContainer\"\n    }, {\n        xtype: \"container\",\n        itemId: \"infoContainer\",\n        id: \"infoContainer\",\n        hidden: !0\n    }, {\n        xtype: \"container\",\n        itemId: \"firstReport\",\n        id: \"firstReport\",\n        items: [{\n            xtype: \"container\",\n            itemId: \"defaultChartContainer\",\n            id: \"defaultChartContainer\"\n        }, {\n            xtype: \"container\",\n            itemId: \"firstReport_GridContainer\",\n            id: \"firstReport_GridContainer\"\n        }]\n    }],\n    launch: function() {\n        this.activeView = \"firstReport\", this.stackType = \"normal\", this._init(), this._createFilterContainer()\n    },\n    setStacking: function() {\n        this.stackType = null === this.stackType ? \"normal\" : null, this._init(), this._processStoreData(this.featureStore, this.featureStoreData)\n    },\n    _init: function() {\n        if (this._displayMask(), this.dynamicItems === void 0 && (this.dynamicItems = {}), this.dynamicItems[this.activeView] === void 0) this.dynamicItems[this.activeView] = {};\n        else {\n            var item;\n            for (item in this.dynamicItems[this.activeView]) this.dynamicItems[this.activeView][item].destroy()\n        }\n    },\n    _createFilterContainer: function() {\n        var that = this,\n            d = new Date,\n            filterContainer;\n        this.selectedTags = [], d.setMonth(d.getMonth() - 12), filterContainer = Ext.create(\"Ext.Container\", {\n            items: [{\n                xtype: \"rallydatefield\",\n                id: \"startDate\",\n                cls: \"filterItem\",\n                fieldLabel: \"Features ended between \",\n                value: d,\n                labelWidth: 150,\n                style: {\n                    \"float\": \"left\"\n                },\n                listeners: {\n                    select: this._createStoreFilter,\n                    scope: this\n                }\n            }, {\n                xtype: \"rallydatefield\",\n                id: \"endDate\",\n                cls: \"filterItem\",\n                fieldLabel: \" and \",\n                labelWidth: 30,\n                style: {\n                    \"float\": \"left\"\n                },\n                value: new Date,\n                listeners: {\n                    afterrender: this._createStoreFilter,\n                    select: this._createStoreFilter,\n                    scope: this\n                }\n            }, {\n                fieldLabel: \"Choose a Tag\",\n                labelWidth: 100,\n                width: 300,\n                xtype: \"rallytagpicker\",\n                id: \"tagPicker\",\n                cls: \"filterItem tagItem\",\n                style: {\n                    \"float\": \"left\"\n                },\n                listeners: {\n                    selectionchange: function(field, values, options) {\n                        that.selectedTags = values, that._createStoreFilter()\n                    },\n                    scope: this\n                }\n            }]\n        }), this.down(\"#filterContainer\").add(filterContainer)\n    },\n    _createStoreFilter: function() {\n        this._destroyDynamicItems();\n        var i, d1, d2, startId = \"startDate\",\n            endId = \"endDate\";\n        for (this._displayMask(), d1 = new Date(Ext.getCmp(startId).getValue()), d2 = new Date(Ext.getCmp(endId).getValue()), d1 > d2 && (Ext.getCmp(startId).setValue(d2), Ext.getCmp(endId).setValue(d1), d1 = new Date(Ext.getCmp(startId).getValue()), d2 = new Date(Ext.getCmp(endId).getValue())), filter = Ext.create(\"Rally.data.QueryFilter\", {\n            property: \"ActualEndDate\",\n            operator: \">=\",\n            value: d1.getFullYear() + \"-\" + (parseInt(d1.getMonth()) + 1) + \"-\" + d1.getDate()\n        }).and(Ext.create(\"Rally.data.QueryFilter\", {\n            property: \"ActualEndDate\",\n            operator: \"<=\",\n            value: d2.getFullYear() + \"-\" + (parseInt(d2.getMonth()) + 1) + \"-\" + d2.getDate()\n        })), i = 0; this.selectedTags.length > i; ++i) filter = filter.and(Ext.create(\"Rally.data.QueryFilter\", {\n            property: \"Tags.Name\",\n            operator: \"=\",\n            value: this.selectedTags[i].data.Name\n        }));\n        this._queryDataStore(filter)\n    },\n    _queryDataStore: function(filter) {\n        Ext.create(\"Rally.data.WsapiDataStore\", {\n            config: {\n                autoLoad: !0,\n                workspace: this.getContext().getWorkspace().ObjectID,\n                project: this.getContext().getProject().ObjectID,\n                limit: \"Infinity\"\n            },\n            model: \"PortfolioItem/Feature\",\n            filters: filter,\n            sorters: [{\n                property: \"ActualEndDate\",\n                direction: \"ASC\"\n            }],\n            listeners: {\n                load: this._processStoreData,\n                scope: this\n            },\n            fetch: [\"Name,ActualStartDate,ActualEndDate,PreliminaryEstimate,FormattedID,Tags,DirectChildrenCount\"]\n        })\n    },\n    _processStoreData: function(store, data, success) {\n        this.featureStore = store, this.featureStoreData = data, this.groupedSeries = [];\n        var that = this,\n            field = store.model.getField(\"PreliminaryEstimate\");\n        field.getAllowedValueStore().load({\n            scope: this,\n            callback: function(records, operation, success) {\n                Ext.Array.each(records, function(val) {\n                    var s = val.get(\"StringValue\");\n                    s && that.groupedSeries.push({\n                        name: s,\n                        data: [],\n                        stack: \"qSizes\"\n                    })\n                }), that.groupedSeries.push({\n                    name: \"N/A\",\n                    data: [],\n                    stack: \"qSizes\"\n                }), that.continueStoreDataProcess(store, data, success)\n            }\n        })\n    },\n    continueStoreDataProcess: function(store, data, success) {\n        if (0 === data.length) {\n            var item;\n            return Ext.get(\"infoContainer\").setHTML(\"No Features found for given project / filter setting.\").show(), this._destroyDynamicItems(), Ext.getBody().unmask(), void 0\n        }\n        Ext.get(\"infoContainer\") && Ext.get(\"infoContainer\").hide();\n        var leadTime, i;\n        for (this.chartData = {\n            totalCount: 0,\n            quarters: {},\n            quarterCount: 0,\n            categories: []\n        }, i = 0; store.data.items.length > i; ++i) leadTime = Rally.util.DateTime.getDifference(store.data.items[i].data.ActualEndDate, store.data.items[i].data.ActualStartDate, \"day\"), store.data.items[i].data.LeadTime = leadTime + \" days\", store.data.items[i].data.custPreliminaryEstimate = null === store.data.items[i].data.PreliminaryEstimate ? \"N/A\" : store.data.items[i].data.PreliminaryEstimate.Name, this._buildChartData(store, i);\n        this._initAndDrawCharts(this.chartData)\n    },\n    _initAndDrawCharts: function(inputData) {\n        if (0 !== inputData.totalCount) {\n            var throughput = [],\n                i, qCount = 0,\n                currTotalCount = 0,\n                avgTotals = [],\n                quarterAVGs = [];\n            for (i in inputData.quarters) throughput.push(inputData.quarters[i].count), currTotalCount += inputData.quarters[i].count, qCount++, avgTotals.push(Math.round(currTotalCount / qCount, 2));\n            for (i = 0; inputData.quarterCount > i; ++i) quarterAVGs.push(Math.round(inputData.totalCount / inputData.quarterCount, 2));\n            this.groupedSeries.unshift({\n                name: \"Throughput\",\n                data: throughput\n            }), this.groupedSeries.push({\n                type: \"spline\",\n                name: \"Moving Average\",\n                data: avgTotals,\n                color: \"blue\",\n                marker: {\n                    lineWidth: 1,\n                    fillColor: \"red\"\n                }\n            }), this.groupedSeries.push({\n                type: \"spline\",\n                name: \"Average / Quarter\",\n                data: quarterAVGs,\n                color: \"purple\",\n                marker: {\n                    lineWidth: 1,\n                    fillColor: \"red\"\n                }\n            }), this.groupedSeries.push({\n                name: \"Total Features: \" + inputData.totalCount,\n                color: \"#fff\",\n                stack: \"blank\"\n            }), this._drawHorizontalBarChart(inputData.categories, this.groupedSeries)\n        }\n    },\n    _buildChartData: function(store, i) {\n        var chartData = this.chartData,\n            custPrelEstimate, endDate = new Date(store.data.items[i].data.ActualEndDate),\n            quarterCat, s;\n        if (custPrelEstimate = store.data.items[i].data.custPreliminaryEstimate, quarterCat = \"Q\" + Math.floor((endDate.getMonth() + 3) / 3) + \"-\" + endDate.getFullYear(), chartData.quarters[quarterCat] === void 0) {\n            chartData.quarters[quarterCat] = {\n                count: 0,\n                estimates: {},\n                features: []\n            }, chartData.categories.push(quarterCat);\n            for (s in this.groupedSeries) this.groupedSeries[s].data.push(0);\n            chartData.quarterCount++\n        }\n        for (chartData.quarters[quarterCat].features.push(store.data.items[i]), chartData.quarters[quarterCat].estimates[custPrelEstimate] === void 0 && (chartData.quarters[quarterCat].estimates[custPrelEstimate] = 0), chartData.quarters[quarterCat].estimates[custPrelEstimate] ++, chartData.quarters[quarterCat].count++, chartData.totalCount++, s = 0; this.groupedSeries.length > s; ++s) custPrelEstimate === this.groupedSeries[s].name && (this.groupedSeries[s].data[chartData.quarterCount - 1] = chartData.quarters[quarterCat].estimates[custPrelEstimate]);\n        this.chartData = chartData\n    },\n    _drawBarChart: function(conf) {\n        this.dynamicItems[this.activeView][conf.id] !== void 0 && this.dynamicItems[this.activeView][conf.id].destroy();\n        var that = this;\n        this.dynamicItems[this.activeView][conf.id] = this.down(conf.targetContainer).add({\n            xtype: \"rallychart\",\n            id: conf.id,\n            chartData: {\n                series: conf.series\n            },\n            chartConfig: {\n                plotOptions: {\n                    column: {\n                        stacking: that.stackType,\n                        cursor: \"pointer\",\n                        point: {\n                            events: {\n                                click: function() {\n                                    var data = [],\n                                        store, item, features = Rally.getApp().chartData.quarters[this.category].features;\n                                    for (item in features)(\"Throughput\" === this.series.name || this.series.name === features[item].data.custPreliminaryEstimate) && data.push(features[item].data);\n                                    store = Ext.create(\"Rally.data.custom.Store\", {\n                                        data: data\n                                    }), Rally.getApp()._addFeatureGrid(store, \"featureGrid\", \"Throughput\" === this.series.name ? \"Features ended in: \" + this.category : 'Features with size \"' + this.series.name + '\" ended in: ' + this.category)\n                                }\n                            }\n                        }\n                    }\n                },\n                chart: {\n                    plotBackgroundColor: null,\n                    plotBorderWidth: null,\n                    plotShadow: !1,\n                    type: conf.chartType\n                },\n                legend: {\n                    align: \"right\",\n                    verticalAlign: \"top\",\n                    x: 0,\n                    y: 100,\n                    layout: \"vertical\"\n                },\n                title: {\n                    text: conf.chartTitle\n                },\n                tooltip: {\n                    formatter: function() {\n                        return \"<b>\" + this.series.name + \" | \" + this.x + \"</b><br/>\" + \"<b>\" + this.y + \"</b> Features<br/><i>(Click to view Features)</i>\"\n                    }\n                },\n                yAxis: [{\n                    title: {\n                        text: conf.yAxisTitle\n                    }\n                }],\n                xAxis: [{\n                    title: {\n                        text: conf.xAxisTitle\n                    },\n                    categories: conf.xAxisCategories\n                }]\n            }\n        }), this.down(\"#\" + conf.id)._unmask()\n    },\n    _drawHorizontalBarChart: function(categories, data) {\n        var conf = {\n            id: \"verticalBars\",\n            targetContainer: \"#defaultChartContainer\",\n            series: data,\n            chartType: \"column\",\n            chartTitle: \"Throughput by Quarters\",\n            xAxisCategories: categories,\n            xAxisTitle: \"Quarters\",\n            yAxisTitle: \"Count\"\n        };\n        this._drawBarChart(conf), Ext.getBody().unmask()\n    },\n    _addFeatureGrid: function(store, id, title) {\n        this.dynamicItems[this.activeView][id] && this.dynamicItems[this.activeView][id].destroy(), Rally.data.ModelFactory.getModel({\n            type: \"PortfolioItem/Feature\",\n            success: function(model) {\n                var featureGrid = this.down(\"#\" + this.activeView + \"_GridContainer\").add({\n                    xtype: \"rallygrid\",\n                    id: id,\n                    listeners: {\n                        render: function() {\n                            Ext.getBody().unmask()\n                        }\n                    },\n                    style: {\n                        marginTop: 30\n                    },\n                    width: 1200,\n                    model: model,\n                    store: store,\n                    title: title,\n                    columnCfgs: [{\n                        text: \"ID\",\n                        dataIndex: \"FormattedID\",\n                        width: 60,\n                        renderer: function(value, style, item, rowIndex) {\n                            return Ext.String.format(\"<a target='_top' href='{1}'>{0}</a>\", value, Rally.nav.Manager.getDetailUrl(item))\n                        }\n                    }, {\n                        text: \"Name\",\n                        dataIndex: \"Name\",\n                        width: 600\n                    }, {\n                        text: \"Stories\",\n                        dataIndex: \"DirectChildrenCount\",\n                        width: 60\n                    }, \"ActualStartDate\", \"ActualEndDate\", {\n                        text: \"Preliminary Estimate\",\n                        dataIndex: \"custPreliminaryEstimate\"\n                    }, {\n                        text: \"Lead Time\",\n                        dataIndex: \"LeadTime\"\n                    }, \"Tags\"]\n                });\n                this.dynamicItems[this.activeView][id] = featureGrid\n            },\n            scope: this\n        })\n    },\n    _destroyDynamicItems: function() {\n        var item;\n        for (item in this.dynamicItems[this.activeView]) this.dynamicItems[this.activeView][item].destroy()\n    },\n    _displayMask: function() {\n        Ext.getBody().mask(\"Report creation in progress...\")\n    }\n});","undoManager":{"mark":83,"position":100,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":448,"column":44},"end":{"row":449,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":449,"column":0},"end":{"row":450,"column":0}},"lines":["            "]},{"action":"insertText","range":{"start":{"row":450,"column":0},"end":{"row":450,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":450,"column":10},"end":{"row":451,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":451,"column":0},"end":{"row":451,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":451,"column":8},"end":{"row":452,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":452,"column":0},"end":{"row":452,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":452,"column":58},"end":{"row":453,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":453,"column":0},"end":{"row":453,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":453,"column":22},"end":{"row":454,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":454,"column":0},"end":{"row":454,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":454,"column":34},"end":{"row":455,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":455,"column":0},"end":{"row":455,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":455,"column":57},"end":{"row":456,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":456,"column":0},"end":{"row":456,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":456,"column":28},"end":{"row":457,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":457,"column":0},"end":{"row":457,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":457,"column":35},"end":{"row":458,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":458,"column":0},"end":{"row":458,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":458,"column":52},"end":{"row":459,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":459,"column":0},"end":{"row":459,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":459,"column":43},"end":{"row":460,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":460,"column":0},"end":{"row":460,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":460,"column":38},"end":{"row":461,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":461,"column":0},"end":{"row":461,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":461,"column":34},"end":{"row":462,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":462,"column":0},"end":{"row":463,"column":0}},"lines":["                "]},{"action":"insertText","range":{"start":{"row":463,"column":0},"end":{"row":463,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":463,"column":14},"end":{"row":464,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":464,"column":0},"end":{"row":464,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":464,"column":59},"end":{"row":465,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":465,"column":0},"end":{"row":466,"column":0}},"lines":["            "]},{"action":"insertText","range":{"start":{"row":466,"column":0},"end":{"row":466,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":466,"column":10},"end":{"row":467,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":467,"column":0},"end":{"row":467,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":467,"column":8},"end":{"row":468,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":468,"column":0},"end":{"row":468,"column":8}},"text":"        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":468,"column":49},"end":{"row":469,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":469,"column":0},"end":{"row":469,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":469,"column":135},"end":{"row":470,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":470,"column":0},"end":{"row":470,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":470,"column":45},"end":{"row":471,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":471,"column":0},"end":{"row":471,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":471,"column":40},"end":{"row":472,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":472,"column":0},"end":{"row":472,"column":20}},"text":"                    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":472,"column":89},"end":{"row":473,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":473,"column":0},"end":{"row":473,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":473,"column":42},"end":{"row":474,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":474,"column":0},"end":{"row":474,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":474,"column":30},"end":{"row":475,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":475,"column":0},"end":{"row":475,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":475,"column":35},"end":{"row":476,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":476,"column":0},"end":{"row":476,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":476,"column":46},"end":{"row":477,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":477,"column":0},"end":{"row":477,"column":32}},"text":"                                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":477,"column":54},"end":{"row":478,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":478,"column":0},"end":{"row":479,"column":0}},"lines":["                                "]},{"action":"insertText","range":{"start":{"row":479,"column":0},"end":{"row":479,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":479,"column":29},"end":{"row":480,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":480,"column":0},"end":{"row":481,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":481,"column":0},"end":{"row":481,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":481,"column":26},"end":{"row":482,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":482,"column":0},"end":{"row":482,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":482,"column":31},"end":{"row":483,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":483,"column":0},"end":{"row":483,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":483,"column":40},"end":{"row":484,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":484,"column":0},"end":{"row":485,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":485,"column":0},"end":{"row":485,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":485,"column":26},"end":{"row":486,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":486,"column":0},"end":{"row":486,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":486,"column":35},"end":{"row":487,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":487,"column":0},"end":{"row":487,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":487,"column":36},"end":{"row":488,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":488,"column":0},"end":{"row":488,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":488,"column":36},"end":{"row":489,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":489,"column":0},"end":{"row":489,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":489,"column":36},"end":{"row":490,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":490,"column":0},"end":{"row":490,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":490,"column":37},"end":{"row":491,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":491,"column":0},"end":{"row":491,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":491,"column":38},"end":{"row":492,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":492,"column":0},"end":{"row":492,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":492,"column":52},"end":{"row":493,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":493,"column":0},"end":{"row":493,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":493,"column":37},"end":{"row":494,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":494,"column":0},"end":{"row":494,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":494,"column":73},"end":{"row":495,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":495,"column":0},"end":{"row":495,"column":32}},"text":"                                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":495,"column":138},"end":{"row":496,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":496,"column":0},"end":{"row":497,"column":0}},"lines":["                                "]},{"action":"insertText","range":{"start":{"row":497,"column":0},"end":{"row":497,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":497,"column":29},"end":{"row":498,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":498,"column":0},"end":{"row":499,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":499,"column":0},"end":{"row":499,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":499,"column":26},"end":{"row":500,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":500,"column":0},"end":{"row":500,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":500,"column":25},"end":{"row":501,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":501,"column":0},"end":{"row":501,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":501,"column":40},"end":{"row":502,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":502,"column":0},"end":{"row":502,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":502,"column":45},"end":{"row":503,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":503,"column":0},"end":{"row":503,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":503,"column":37},"end":{"row":504,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":504,"column":0},"end":{"row":505,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":505,"column":0},"end":{"row":505,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":505,"column":26},"end":{"row":506,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":506,"column":0},"end":{"row":506,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":506,"column":25},"end":{"row":507,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":507,"column":0},"end":{"row":507,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":507,"column":43},"end":{"row":508,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":508,"column":0},"end":{"row":508,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":508,"column":60},"end":{"row":509,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":509,"column":0},"end":{"row":509,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":509,"column":36},"end":{"row":510,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":510,"column":0},"end":{"row":511,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":511,"column":0},"end":{"row":511,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":511,"column":26},"end":{"row":512,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":512,"column":0},"end":{"row":512,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":512,"column":59},"end":{"row":513,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":513,"column":0},"end":{"row":513,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":513,"column":56},"end":{"row":514,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":514,"column":0},"end":{"row":514,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":514,"column":63},"end":{"row":515,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":515,"column":0},"end":{"row":516,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":516,"column":0},"end":{"row":516,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":516,"column":26},"end":{"row":517,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":517,"column":0},"end":{"row":517,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":517,"column":25},"end":{"row":518,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":518,"column":0},"end":{"row":518,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":518,"column":45},"end":{"row":519,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":519,"column":0},"end":{"row":519,"column":28}},"text":"                            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":519,"column":48},"end":{"row":520,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":520,"column":0},"end":{"row":521,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":521,"column":0},"end":{"row":521,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":521,"column":26},"end":{"row":522,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":522,"column":0},"end":{"row":522,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":522,"column":30},"end":{"row":523,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":523,"column":0},"end":{"row":523,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":523,"column":25},"end":{"row":524,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":524,"column":0},"end":{"row":525,"column":0}},"lines":["                        "]},{"action":"insertText","range":{"start":{"row":525,"column":0},"end":{"row":525,"column":20}},"text":"                    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":525,"column":23},"end":{"row":526,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":526,"column":0},"end":{"row":526,"column":20}},"text":"                    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":526,"column":82},"end":{"row":527,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":527,"column":0},"end":{"row":528,"column":0}},"lines":["                "]},{"action":"insertText","range":{"start":{"row":528,"column":0},"end":{"row":528,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":528,"column":13},"end":{"row":529,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":529,"column":0},"end":{"row":529,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":529,"column":15},"end":{"row":530,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":530,"column":0},"end":{"row":530,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":530,"column":12},"end":{"row":531,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":531,"column":0},"end":{"row":531,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":531,"column":44},"end":{"row":532,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":532,"column":0},"end":{"row":532,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":532,"column":25},"end":{"row":533,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":533,"column":0},"end":{"row":533,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":533,"column":63},"end":{"row":534,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":534,"column":0},"end":{"row":534,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":534,"column":16},"end":{"row":534,"column":20}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":534,"column":70},"end":{"row":535,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":535,"column":0},"end":{"row":536,"column":0}},"lines":["                "]},{"action":"insertText","range":{"start":{"row":536,"column":0},"end":{"row":536,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":536,"column":14},"end":{"row":537,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":537,"column":0},"end":{"row":537,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":537,"column":12},"end":{"row":538,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":538,"column":0},"end":{"row":538,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":538,"column":36},"end":{"row":539,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":539,"column":0},"end":{"row":539,"column":16}},"text":"                "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":539,"column":68},"end":{"row":540,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":540,"column":0},"end":{"row":541,"column":0}},"lines":["                "]},{"action":"insertText","range":{"start":{"row":541,"column":0},"end":{"row":541,"column":12}},"text":"            "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":541,"column":13},"end":{"row":542,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":542,"column":0},"end":{"row":543,"column":0}},"lines":["    "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":["Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc3/doc/\">App SDK 2.0rc3 Docs</a>'},","    launch: function() {","        //Write app code here","    }","});"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":551,"column":0},"end":{"row":551,"column":7}},"text":"</html>"},{"action":"removeLines","range":{"start":{"row":536,"column":0},"end":{"row":551,"column":0}},"nl":"\n","lines":["            Rally.launchApp('CustomApp', {","                name:\"FeatureThroughput\",","\t            parentRepos:\"\"","            });","","        });","    </script>","","","    <style type=\"text/css\">","        #nav{background-color:#C0C0C0;margin-bottom:20px;font-size:120%;padding:5px}#nav a{background-color:#E0E0E0;padding:5px}.filterItem{margin:0px 20px 0 0}.tagBox{margin-left:20px !important}#filterContainer{margin:0 0 30px 20px;background-color:#E0EBFF;border-radius:5px;padding:5px;width:860px}#infoContainer{background-color:#efefef;padding:8px;border-radius:5px;color:#FF3333;font-size:120%;font-weight:bold;width:400px;margin-left:20px}","    </style>","</head>","<body>","</body>"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":535,"column":0},"end":{"row":536,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":534,"column":3},"end":{"row":535,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":51,"column":41},"end":{"row":51,"column":42}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":59,"column":75},"end":{"row":59,"column":76}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":66,"column":12},"end":{"row":66,"column":16}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":71,"column":16},"end":{"row":71,"column":20}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":534,"column":0},"end":{"row":534,"column":3}},"text":"});"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":534,"column":0}},"nl":"\n","lines":["Ext.define(\"CustomApp\",{","    extend:\"Rally.app.App\",","    componentCls:\"app\",","    items:[","        {","            xtype:\"container\",","            itemId:\"nav\",","            id:\"nav\",","            html:'<a href=\"#\" onClick=\"Rally.getApp().setStacking();return false;\">Change stacking type</a>'","            ","        },","        {","            xtype:\"container\",","            itemId:\"filterContainer\",","            id:\"filterContainer\"","            ","        },","        {","            xtype:\"container\",","            itemId:\"infoContainer\",","            id:\"infoContainer\",","            hidden:!0","            ","        },","        {","            xtype:\"container\",","            itemId:\"firstReport\",","            id:\"firstReport\",","            items:[","                {","                    xtype:\"container\",","                    itemId:\"defaultChartContainer\",","                    id:\"defaultChartContainer\"","                    ","                },","                {","                    xtype:\"container\",","                    itemId:\"firstReport_GridContainer\",","                    id:\"firstReport_GridContainer\"","                    ","                }","                ]","            ","        }","        ],","        ","        launch:function()","        {","            this.activeView=\"firstReport\",","            this.stackType=\"normal\",","            this._init(),","            this._createFilterContainer();","            ","        },","        ","        setStacking:function()","        {","            this.stackType=null===this.stackType?\"normal\":null,","            this._init(),","            this._processStoreData(this.featureStore,this.featureStoreData);","            ","        },","        ","        _init:function()","        {","            if(this._displayMask(),this.dynamicItems===void 0&&(this.dynamicItems={}),this.dynamicItems[this.activeView]===void 0)","                this.dynamicItems[this.activeView]={};","            else","            {","                var item;","                for(item in this.dynamicItems[this.activeView])","                    this.dynamicItems[this.activeView][item].destroy()","                ","            }","            ","        },","        ","        _createFilterContainer:function()","        {","            var that=this, ","            d=new Date,","            filterContainer;","            this.selectedTags=[],","            d.setMonth(d.getMonth()-12),","            filterContainer=Ext.create(\"Ext.Container\",{","                items:[","                    {","                        xtype:\"rallydatefield\",","                        id:\"startDate\",","                        cls:\"filterItem\",","                        fieldLabel:\"Features ended between \",","                        value:d,","                        labelWidth:150,","                        style:","                        {","                            \"float\":\"left\"","                            ","                        },","                        listeners:{","                            select:this._createStoreFilter,scope:this","                            ","                        }","                        ","                    },","                    {","                        xtype:\"rallydatefield\",","                        id:\"endDate\",","                        cls:\"filterItem\",","                        fieldLabel:\" and \",","                        labelWidth:30,","                        style:","                        {","                            \"float\":\"left\"","                            ","                        },","                        value:new Date,","                        listeners:","                        {","                            afterrender:this._createStoreFilter,","                            select:this._createStoreFilter,","                            scope:this","                            ","                        }","                        ","                    },","                    {","                        fieldLabel:\"Choose a Tag\",","                        labelWidth:100,","                        width:300,","                        xtype:\"rallytagpicker\",","                        id:\"tagPicker\",","                        cls:\"filterItem tagItem\",","                        style:","                        {","                            \"float\":\"left\"","                            ","                        },","                        listeners:","                        {","                            selectionchange:function(field,values,options)","                            {","                                that.selectedTags=values,","                                that._createStoreFilter()","                                ","                            },","                            scope:this","                            ","                        }","                        ","                    }","                    ]","                ","            }),","            this.down(\"#filterContainer\").add(filterContainer)","            ","        },","        ","        _createStoreFilter:function(){","            this._destroyDynamicItems();","            var i,d1,d2,startId=\"startDate\",endId=\"endDate\";","            for(this._displayMask(),","                d1=new Date(Ext.getCmp(startId).getValue()),","                d2=new Date(Ext.getCmp(endId).getValue()),","                d1>d2&&(Ext.getCmp(startId).setValue(d2),","                        Ext.getCmp(endId).setValue(d1),","                        d1=new Date(Ext.getCmp(startId).getValue()),","                        d2=new Date(Ext.getCmp(endId).getValue())","                        ),","                        filter=Ext.create(\"Rally.data.QueryFilter\",{","                            property:\"ActualEndDate\",","                            operator:\">=\",","                            value:d1.getFullYear()+\"-\"+(parseInt(d1.getMonth())+1)+\"-\"+d1.getDate()","                            ","                        }).and(Ext.create(\"Rally.data.QueryFilter\",{","                            property:\"ActualEndDate\",","                            operator:\"<=\",value:d2.getFullYear()+\"-\"+(parseInt(d2.getMonth())+1)+\"-\"+d2.getDate()})","                            ),","                            i=0;this.selectedTags.length>i;++i)","                            filter=filter.and(Ext.create(\"Rally.data.QueryFilter\",{","                                property:\"Tags.Name\",","                                operator:\"=\",","                                value:this.selectedTags[i].data.Name","                                ","                            }));","                            this._queryDataStore(filter)","            ","        },","        ","        _queryDataStore:function(filter){","            Ext.create(\"Rally.data.WsapiDataStore\",","            {","                config:{","                    autoLoad:!0,","                    workspace:this.getContext().getWorkspace().ObjectID,","                    project:this.getContext().getProject().ObjectID,","                    limit:\"Infinity\"","                    ","                },","                model:\"PortfolioItem/Feature\",","                filters:filter,","                sorters:[","                    {","                        property:\"ActualEndDate\",","                        direction:\"ASC\"","                        ","                    }","                    ],","                    listeners:{","                        load:this._processStoreData,","                        scope:this","                        ","                    },","                    fetch:[\"Name,ActualStartDate,ActualEndDate,PreliminaryEstimate,FormattedID,Tags,DirectChildrenCount\"]","                ","            })","            ","        },","        ","        _processStoreData:function(store,data,success)","        {","            this.featureStore=store,","            this.featureStoreData=data,","            this.groupedSeries=[];","            var that=this,","            field=store.model.getField(\"PreliminaryEstimate\");","            field.getAllowedValueStore().load({","                    scope:this,","                    callback:function(records,operation,success)","                    {","                        Ext.Array.each(records,function(val)","                        {","                            var s=val.get(\"StringValue\");","                            s&&that.groupedSeries.push(","                                {","                                    name:s,","                                    data:[],","                                    stack:\"qSizes\"","                                    ","                                })","                            ","                        }),","                        that.groupedSeries.push({","                                name:\"N/A\",","                                data:[],","                                stack:\"qSizes\"","                                ","                            }),","                        that.continueStoreDataProcess(store,data,success)","                        ","                    }","                    ","                })","            ","        },","        ","        continueStoreDataProcess:function(store,data,success)","        {","            if(0===data.length)","            {","                var item;","                return Ext.get(\"infoContainer\").setHTML(\"No Features found for given project / filter setting.\").show(),","                this._destroyDynamicItems(),","                Ext.getBody().unmask(),","                void 0","                ","            }","            Ext.get(\"infoContainer\")&&Ext.get(\"infoContainer\").hide();","            var leadTime,i;","            for(this.chartData={","                totalCount:0,","                quarters:{},","                quarterCount:0,","                categories:[]","                ","            },i=0;store.data.items.length>i;++i)","            leadTime=Rally.util.DateTime.getDifference(store.data.items[i].data.ActualEndDate,store.data.items[i].data.ActualStartDate,\"day\"),","            store.data.items[i].data.LeadTime=leadTime+\" days\",store.data.items[i].data.custPreliminaryEstimate=null===store.data.items[i].data.PreliminaryEstimate?\"N/A\":store.data.items[i].data.PreliminaryEstimate.Name,this._buildChartData(store,i);","            this._initAndDrawCharts(this.chartData)","            ","        },","        ","        _initAndDrawCharts:function(inputData)","        {","            if(0!==inputData.totalCount)","            {","                var throughput=[],i,qCount=0,currTotalCount=0,avgTotals=[],quarterAVGs=[];","                for(i in inputData.quarters)","                    throughput.push(inputData.quarters[i].count),","                    currTotalCount+=inputData.quarters[i].count,","                    qCount++,","                    avgTotals.push(Math.round(currTotalCount/qCount,2));","                for(i=0;inputData.quarterCount>i;++i)","                    quarterAVGs.push(Math.round(inputData.totalCount/inputData.quarterCount,2));","                this.groupedSeries.unshift({","                    name:\"Throughput\",","                    data:throughput}),","                this.groupedSeries.push(","                    {","                        type:\"spline\",","                        name:\"Moving Average\",","                        data:avgTotals,color:\"blue\",","                        marker:","                        {","                            lineWidth:1,","                            fillColor:\"red\"","                        }","                        ","                    }),","                this.groupedSeries.push({","                    type:\"spline\",","                    name:\"Average / Quarter\",","                    data:quarterAVGs,","                    color:\"purple\",","                    marker:{","                        lineWidth:1,","                        fillColor:\"red\"","                        ","                    }","                    ","                }),","                this.groupedSeries.push({","                    name:\"Total Features: \"+inputData.totalCount,","                    color:\"#fff\",","                    stack:\"blank\"","                    ","                }),","                this._drawHorizontalBarChart(inputData.categories,this.groupedSeries)","                ","            }","            ","        },","        ","        _buildChartData:function(store,i){","            var chartData=this.chartData,","                custPrelEstimate,","                endDate=new Date(store.data.items[i].data.ActualEndDate),","                quarterCat,s;","            if(custPrelEstimate=store.data.items[i].data.custPreliminaryEstimate,quarterCat=\"Q\"+Math.floor((endDate.getMonth()+3)/3)+\"-\"+endDate.getFullYear(),chartData.quarters[quarterCat]===void 0)","            {","                chartData.quarters[quarterCat]={","                    count:0,","                    estimates:{},","                    features:[]","                    ","                },","                chartData.categories.push(quarterCat);","                for(s in this.groupedSeries)","                    this.groupedSeries[s].data.push(0);","                chartData.quarterCount++","                ","            }","            for(chartData.quarters[quarterCat].features.push(store.data.items[i]),chartData.quarters[quarterCat].estimates[custPrelEstimate]===void 0&&(chartData.quarters[quarterCat].estimates[custPrelEstimate]=0),chartData.quarters[quarterCat].estimates[custPrelEstimate]++,chartData.quarters[quarterCat].count++,chartData.totalCount++,s=0;this.groupedSeries.length>s;++s)","                custPrelEstimate===this.groupedSeries[s].name&&(this.groupedSeries[s].data[chartData.quarterCount-1]=chartData.quarters[quarterCat].estimates[custPrelEstimate]);","            this.chartData=chartData","            ","        },","        ","        _drawBarChart:function(conf)","        {","            this.dynamicItems[this.activeView][conf.id]!==void 0&&this.dynamicItems[this.activeView][conf.id].destroy();","            var that=this;","            this.dynamicItems[this.activeView][conf.id]=this.down(conf.targetContainer).add({","                xtype:\"rallychart\",","                id:conf.id,","                chartData:{","                    series:conf.series","                    ","                },","                chartConfig:{","                    plotOptions:{","                        column:{","                            stacking:that.stackType,","                            cursor:\"pointer\",","                            point:{","                                events:{","                                    click:function(){","                                        var data=[],store,item,features=Rally.getApp().chartData.quarters[this.category].features;","                                        for(item in features)","                                        (\"Throughput\"===this.series.name||this.series.name===features[item].data.custPreliminaryEstimate)&&data.push(features[item].data);","                                        store=Ext.create(\"Rally.data.custom.Store\",{","                                            data:data","                                            ","                                        }),","                                        Rally.getApp()._addFeatureGrid(store,\"featureGrid\",\"Throughput\"===this.series.name?\"Features ended in: \"+this.category:'Features with size \"'+this.series.name+'\" ended in: '+this.category)","                                        ","                                    }","                                    ","                                }","                                ","                            }","                            ","                        }","                        ","                    },","                    chart:{","                        plotBackgroundColor:null,","                        plotBorderWidth:null,","                        plotShadow:!1,","                        type:conf.chartType","                        ","                    },","                    legend:{","                        align:\"right\",","                        verticalAlign:\"top\",","                        x:0,","                        y:100,","                        layout:\"vertical\"","                        ","                    },","                    title:{","                        text:conf.chartTitle","                        ","                    },","                    tooltip:{","                        formatter:function(){","                            return\"<b>\"+this.series.name+\" | \"+this.x+\"</b><br/>\"+\"<b>\"+this.y+\"</b> Features<br/><i>(Click to view Features)</i>\"","                            ","                        }","                        ","                    },","                    yAxis:[{","                        title:{","                            text:conf.yAxisTitle","                            ","                        }","                        ","                    }],","                    xAxis:[{","                        title:{","                            text:conf.xAxisTitle","                            ","                        },","                        categories:conf.xAxisCategories","                        ","                    }]","                    ","                }","                ","            }),","            this.down(\"#\"+conf.id)._unmask()","            ","        },","        ","        _drawHorizontalBarChart:function(categories,data){","            var conf={","                id:\"verticalBars\",","                targetContainer:\"#defaultChartContainer\",","                series:data,","                chartType:\"column\",","                chartTitle:\"Throughput by Quarters\",","                xAxisCategories:categories,","                xAxisTitle:\"Quarters\",","                yAxisTitle:\"Count\"","                ","            };","            this._drawBarChart(conf),Ext.getBody().unmask()","            ","        },","        ","        _addFeatureGrid:function(store,id,title){","            this.dynamicItems[this.activeView][id]&&this.dynamicItems[this.activeView][id].destroy(),Rally.data.ModelFactory.getModel({","                type:\"PortfolioItem/Feature\",","                success:function(model){","                    var featureGrid=this.down(\"#\"+this.activeView+\"_GridContainer\").add({","                        xtype:\"rallygrid\",","                        id:id,","                        listeners:{","                            render:function(){","                                Ext.getBody().unmask()","                                ","                            }","                            ","                        },","                        style:{","                            marginTop:30","                            ","                        },","                        width:1200,","                        model:model,","                        store:store,","                        title:title,","                        columnCfgs:[{","                            text:\"ID\",","                            dataIndex:\"FormattedID\",","                            width:60,","                            renderer:function(value,style,item,rowIndex){","                                return Ext.String.format(\"<a target='_top' href='{1}'>{0}</a>\",value,Rally.nav.Manager.getDetailUrl(item))","                                ","                            }","                            ","                        },","                        {","                            text:\"Name\",","                            dataIndex:\"Name\",","                            width:600","                            ","                        },","                        {","                            text:\"Stories\",","                            dataIndex:\"DirectChildrenCount\",","                            width:60","                            ","                        },","                        \"ActualStartDate\",\"ActualEndDate\",{","                            text:\"Preliminary Estimate\",","                            dataIndex:\"custPreliminaryEstimate\"","                            ","                        },","                        {","                            text:\"Lead Time\",","                            dataIndex:\"LeadTime\"","                            ","                        },","                        \"Tags\"","                        ]","                        ","                    });","                    this.dynamicItems[this.activeView][id]=featureGrid},scope:this","                ","            }","            )},","            ","            _destroyDynamicItems:function(){","                var item;","                for(item in this.dynamicItems[this.activeView])","                    this.dynamicItems[this.activeView][item].destroy()","                ","            },","            ","            _displayMask:function(){","                Ext.getBody().mask(\"Report creation in progress...\")","                ","            }","    "]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":15}},"text":"<!DOCTYPE html>"},{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":26,"column":0}},"lines":["<html>","<head>","    <title>FeatureThroughput</title>","","    <script type=\"text/javascript\" src=\"/apps/2.0rc3/sdk.js\"></script>","","    <script type=\"text/javascript\">","        Rally.onReady(function () {","                Ext.define(\"CustomApp\",{extend:\"Rally.app.App\",componentCls:\"app\",items:[{xtype:\"container\",itemId:\"nav\",id:\"nav\",html:'<a href=\"#\" onClick=\"Rally.getApp().setStacking();return false;\">Change stacking type</a>'},{xtype:\"container\",itemId:\"filterContainer\",id:\"filterContainer\"},{xtype:\"container\",itemId:\"infoContainer\",id:\"infoContainer\",hidden:!0},{xtype:\"container\",itemId:\"firstReport\",id:\"firstReport\",items:[{xtype:\"container\",itemId:\"defaultChartContainer\",id:\"defaultChartContainer\"},{xtype:\"container\",itemId:\"firstReport_GridContainer\",id:\"firstReport_GridContainer\"}]}],launch:function(){this.activeView=\"firstReport\",this.stackType=\"normal\",this._init(),this._createFilterContainer()},setStacking:function(){this.stackType=null===this.stackType?\"normal\":null,this._init(),this._processStoreData(this.featureStore,this.featureStoreData)},_init:function(){if(this._displayMask(),this.dynamicItems===void 0&&(this.dynamicItems={}),this.dynamicItems[this.activeView]===void 0)this.dynamicItems[this.activeView]={};else{var item;for(item in this.dynamicItems[this.activeView])this.dynamicItems[this.activeView][item].destroy()}},_createFilterContainer:function(){var that=this,d=new Date,filterContainer;this.selectedTags=[],d.setMonth(d.getMonth()-12),filterContainer=Ext.create(\"Ext.Container\",{items:[{xtype:\"rallydatefield\",id:\"startDate\",cls:\"filterItem\",fieldLabel:\"Features ended between \",value:d,labelWidth:150,style:{\"float\":\"left\"},listeners:{select:this._createStoreFilter,scope:this}},{xtype:\"rallydatefield\",id:\"endDate\",cls:\"filterItem\",fieldLabel:\" and \",labelWidth:30,style:{\"float\":\"left\"},value:new Date,listeners:{afterrender:this._createStoreFilter,select:this._createStoreFilter,scope:this}},{fieldLabel:\"Choose a Tag\",labelWidth:100,width:300,xtype:\"rallytagpicker\",id:\"tagPicker\",cls:\"filterItem tagItem\",style:{\"float\":\"left\"},listeners:{selectionchange:function(field,values,options){that.selectedTags=values,that._createStoreFilter()},scope:this}}]}),this.down(\"#filterContainer\").add(filterContainer)},_createStoreFilter:function(){this._destroyDynamicItems();var i,d1,d2,startId=\"startDate\",endId=\"endDate\";for(this._displayMask(),d1=new Date(Ext.getCmp(startId).getValue()),d2=new Date(Ext.getCmp(endId).getValue()),d1>d2&&(Ext.getCmp(startId).setValue(d2),Ext.getCmp(endId).setValue(d1),d1=new Date(Ext.getCmp(startId).getValue()),d2=new Date(Ext.getCmp(endId).getValue())),filter=Ext.create(\"Rally.data.QueryFilter\",{property:\"ActualEndDate\",operator:\">=\",value:d1.getFullYear()+\"-\"+(parseInt(d1.getMonth())+1)+\"-\"+d1.getDate()}).and(Ext.create(\"Rally.data.QueryFilter\",{property:\"ActualEndDate\",operator:\"<=\",value:d2.getFullYear()+\"-\"+(parseInt(d2.getMonth())+1)+\"-\"+d2.getDate()})),i=0;this.selectedTags.length>i;++i)filter=filter.and(Ext.create(\"Rally.data.QueryFilter\",{property:\"Tags.Name\",operator:\"=\",value:this.selectedTags[i].data.Name}));this._queryDataStore(filter)},_queryDataStore:function(filter){Ext.create(\"Rally.data.WsapiDataStore\",{config:{autoLoad:!0,workspace:this.getContext().getWorkspace().ObjectID,project:this.getContext().getProject().ObjectID,limit:\"Infinity\"},model:\"PortfolioItem/Feature\",filters:filter,sorters:[{property:\"ActualEndDate\",direction:\"ASC\"}],listeners:{load:this._processStoreData,scope:this},fetch:[\"Name,ActualStartDate,ActualEndDate,PreliminaryEstimate,FormattedID,Tags,DirectChildrenCount\"]})},_processStoreData:function(store,data,success){this.featureStore=store,this.featureStoreData=data,this.groupedSeries=[];var that=this,field=store.model.getField(\"PreliminaryEstimate\");field.getAllowedValueStore().load({scope:this,callback:function(records,operation,success){Ext.Array.each(records,function(val){var s=val.get(\"StringValue\");s&&that.groupedSeries.push({name:s,data:[],stack:\"qSizes\"})}),that.groupedSeries.push({name:\"N/A\",data:[],stack:\"qSizes\"}),that.continueStoreDataProcess(store,data,success)}})},continueStoreDataProcess:function(store,data,success){if(0===data.length){var item;return Ext.get(\"infoContainer\").setHTML(\"No Features found for given project / filter setting.\").show(),this._destroyDynamicItems(),Ext.getBody().unmask(),void 0}Ext.get(\"infoContainer\")&&Ext.get(\"infoContainer\").hide();var leadTime,i;for(this.chartData={totalCount:0,quarters:{},quarterCount:0,categories:[]},i=0;store.data.items.length>i;++i)leadTime=Rally.util.DateTime.getDifference(store.data.items[i].data.ActualEndDate,store.data.items[i].data.ActualStartDate,\"day\"),store.data.items[i].data.LeadTime=leadTime+\" days\",store.data.items[i].data.custPreliminaryEstimate=null===store.data.items[i].data.PreliminaryEstimate?\"N/A\":store.data.items[i].data.PreliminaryEstimate.Name,this._buildChartData(store,i);this._initAndDrawCharts(this.chartData)},_initAndDrawCharts:function(inputData){if(0!==inputData.totalCount){var throughput=[],i,qCount=0,currTotalCount=0,avgTotals=[],quarterAVGs=[];for(i in inputData.quarters)throughput.push(inputData.quarters[i].count),currTotalCount+=inputData.quarters[i].count,qCount++,avgTotals.push(Math.round(currTotalCount/qCount,2));for(i=0;inputData.quarterCount>i;++i)quarterAVGs.push(Math.round(inputData.totalCount/inputData.quarterCount,2));this.groupedSeries.unshift({name:\"Throughput\",data:throughput}),this.groupedSeries.push({type:\"spline\",name:\"Moving Average\",data:avgTotals,color:\"blue\",marker:{lineWidth:1,fillColor:\"red\"}}),this.groupedSeries.push({type:\"spline\",name:\"Average / Quarter\",data:quarterAVGs,color:\"purple\",marker:{lineWidth:1,fillColor:\"red\"}}),this.groupedSeries.push({name:\"Total Features: \"+inputData.totalCount,color:\"#fff\",stack:\"blank\"}),this._drawHorizontalBarChart(inputData.categories,this.groupedSeries)}},_buildChartData:function(store,i){var chartData=this.chartData,custPrelEstimate,endDate=new Date(store.data.items[i].data.ActualEndDate),quarterCat,s;if(custPrelEstimate=store.data.items[i].data.custPreliminaryEstimate,quarterCat=\"Q\"+Math.floor((endDate.getMonth()+3)/3)+\"-\"+endDate.getFullYear(),chartData.quarters[quarterCat]===void 0){chartData.quarters[quarterCat]={count:0,estimates:{},features:[]},chartData.categories.push(quarterCat);for(s in this.groupedSeries)this.groupedSeries[s].data.push(0);chartData.quarterCount++}for(chartData.quarters[quarterCat].features.push(store.data.items[i]),chartData.quarters[quarterCat].estimates[custPrelEstimate]===void 0&&(chartData.quarters[quarterCat].estimates[custPrelEstimate]=0),chartData.quarters[quarterCat].estimates[custPrelEstimate]++,chartData.quarters[quarterCat].count++,chartData.totalCount++,s=0;this.groupedSeries.length>s;++s)custPrelEstimate===this.groupedSeries[s].name&&(this.groupedSeries[s].data[chartData.quarterCount-1]=chartData.quarters[quarterCat].estimates[custPrelEstimate]);this.chartData=chartData},_drawBarChart:function(conf){this.dynamicItems[this.activeView][conf.id]!==void 0&&this.dynamicItems[this.activeView][conf.id].destroy();var that=this;this.dynamicItems[this.activeView][conf.id]=this.down(conf.targetContainer).add({xtype:\"rallychart\",id:conf.id,chartData:{series:conf.series},chartConfig:{plotOptions:{column:{stacking:that.stackType,cursor:\"pointer\",point:{events:{click:function(){var data=[],store,item,features=Rally.getApp().chartData.quarters[this.category].features;for(item in features)(\"Throughput\"===this.series.name||this.series.name===features[item].data.custPreliminaryEstimate)&&data.push(features[item].data);store=Ext.create(\"Rally.data.custom.Store\",{data:data}),Rally.getApp()._addFeatureGrid(store,\"featureGrid\",\"Throughput\"===this.series.name?\"Features ended in: \"+this.category:'Features with size \"'+this.series.name+'\" ended in: '+this.category)}}}}},chart:{plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1,type:conf.chartType},legend:{align:\"right\",verticalAlign:\"top\",x:0,y:100,layout:\"vertical\"},title:{text:conf.chartTitle},tooltip:{formatter:function(){return\"<b>\"+this.series.name+\" | \"+this.x+\"</b><br/>\"+\"<b>\"+this.y+\"</b> Features<br/><i>(Click to view Features)</i>\"}},yAxis:[{title:{text:conf.yAxisTitle}}],xAxis:[{title:{text:conf.xAxisTitle},categories:conf.xAxisCategories}]}}),this.down(\"#\"+conf.id)._unmask()},_drawHorizontalBarChart:function(categories,data){var conf={id:\"verticalBars\",targetContainer:\"#defaultChartContainer\",series:data,chartType:\"column\",chartTitle:\"Throughput by Quarters\",xAxisCategories:categories,xAxisTitle:\"Quarters\",yAxisTitle:\"Count\"};this._drawBarChart(conf),Ext.getBody().unmask()},_addFeatureGrid:function(store,id,title){this.dynamicItems[this.activeView][id]&&this.dynamicItems[this.activeView][id].destroy(),Rally.data.ModelFactory.getModel({type:\"PortfolioItem/Feature\",success:function(model){var featureGrid=this.down(\"#\"+this.activeView+\"_GridContainer\").add({xtype:\"rallygrid\",id:id,listeners:{render:function(){Ext.getBody().unmask()}},style:{marginTop:30},width:1200,model:model,store:store,title:title,columnCfgs:[{text:\"ID\",dataIndex:\"FormattedID\",width:60,renderer:function(value,style,item,rowIndex){return Ext.String.format(\"<a target='_top' href='{1}'>{0}</a>\",value,Rally.nav.Manager.getDetailUrl(item))}},{text:\"Name\",dataIndex:\"Name\",width:600},{text:\"Stories\",dataIndex:\"DirectChildrenCount\",width:60},\"ActualStartDate\",\"ActualEndDate\",{text:\"Preliminary Estimate\",dataIndex:\"custPreliminaryEstimate\"},{text:\"Lead Time\",dataIndex:\"LeadTime\"},\"Tags\"]});this.dynamicItems[this.activeView][id]=featureGrid},scope:this})},_destroyDynamicItems:function(){var item;for(item in this.dynamicItems[this.activeView])this.dynamicItems[this.activeView][item].destroy()},_displayMask:function(){Ext.getBody().mask(\"Report creation in progress...\")}});","","            Rally.launchApp('CustomApp', {","                name:\"FeatureThroughput\",","\t            parentRepos:\"\"","            });","","        });","    </script>","","","    <style type=\"text/css\">","        #nav{background-color:#C0C0C0;margin-bottom:20px;font-size:120%;padding:5px}#nav a{background-color:#E0E0E0;padding:5px}.filterItem{margin:0px 20px 0 0}.tagBox{margin-left:20px !important}#filterContainer{margin:0 0 30px 20px;background-color:#E0EBFF;border-radius:5px;padding:5px;width:860px}#infoContainer{background-color:#efefef;padding:8px;border-radius:5px;color:#FF3333;font-size:120%;font-weight:bold;width:400px;margin-left:20px}","    </style>","</head>","<body>","</body>"]},{"action":"insertText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":7}},"text":"</html>"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":0},"end":{"row":26,"column":7}},"text":"</html>"},{"action":"removeLines","range":{"start":{"row":11,"column":0},"end":{"row":26,"column":0}},"nl":"\n","lines":["            Rally.launchApp('CustomApp', {","                name:\"FeatureThroughput\",","\t            parentRepos:\"\"","            });","","        });","    </script>","","","    <style type=\"text/css\">","        #nav{background-color:#C0C0C0;margin-bottom:20px;font-size:120%;padding:5px}#nav a{background-color:#E0E0E0;padding:5px}.filterItem{margin:0px 20px 0 0}.tagBox{margin-left:20px !important}#filterContainer{margin:0 0 30px 20px;background-color:#E0EBFF;border-radius:5px;padding:5px;width:860px}#infoContainer{background-color:#efefef;padding:8px;border-radius:5px;color:#FF3333;font-size:120%;font-weight:bold;width:400px;margin-left:20px}","    </style>","</head>","<body>","</body>"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":9,"column":9620},"end":{"row":10,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":8,"column":0},"end":{"row":8,"column":35}},"text":"        Rally.onReady(function () {"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":8,"column":0}},"nl":"\n","lines":["<!DOCTYPE html>","<html>","<head>","    <title>FeatureThroughput</title>","","    <script type=\"text/javascript\" src=\"/apps/2.0rc3/sdk.js\"></script>","","    <script type=\"text/javascript\">"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":9604}},"text":"Ext.define(\"CustomApp\",{extend:\"Rally.app.App\",componentCls:\"app\",items:[{xtype:\"container\",itemId:\"nav\",id:\"nav\",html:'<a href=\"#\" onClick=\"Rally.getApp().setStacking();return false;\">Change stacking type</a>'},{xtype:\"container\",itemId:\"filterContainer\",id:\"filterContainer\"},{xtype:\"container\",itemId:\"infoContainer\",id:\"infoContainer\",hidden:!0},{xtype:\"container\",itemId:\"firstReport\",id:\"firstReport\",items:[{xtype:\"container\",itemId:\"defaultChartContainer\",id:\"defaultChartContainer\"},{xtype:\"container\",itemId:\"firstReport_GridContainer\",id:\"firstReport_GridContainer\"}]}],launch:function(){this.activeView=\"firstReport\",this.stackType=\"normal\",this._init(),this._createFilterContainer()},setStacking:function(){this.stackType=null===this.stackType?\"normal\":null,this._init(),this._processStoreData(this.featureStore,this.featureStoreData)},_init:function(){if(this._displayMask(),this.dynamicItems===void 0&&(this.dynamicItems={}),this.dynamicItems[this.activeView]===void 0)this.dynamicItems[this.activeView]={};else{var item;for(item in this.dynamicItems[this.activeView])this.dynamicItems[this.activeView][item].destroy()}},_createFilterContainer:function(){var that=this,d=new Date,filterContainer;this.selectedTags=[],d.setMonth(d.getMonth()-12),filterContainer=Ext.create(\"Ext.Container\",{items:[{xtype:\"rallydatefield\",id:\"startDate\",cls:\"filterItem\",fieldLabel:\"Features ended between \",value:d,labelWidth:150,style:{\"float\":\"left\"},listeners:{select:this._createStoreFilter,scope:this}},{xtype:\"rallydatefield\",id:\"endDate\",cls:\"filterItem\",fieldLabel:\" and \",labelWidth:30,style:{\"float\":\"left\"},value:new Date,listeners:{afterrender:this._createStoreFilter,select:this._createStoreFilter,scope:this}},{fieldLabel:\"Choose a Tag\",labelWidth:100,width:300,xtype:\"rallytagpicker\",id:\"tagPicker\",cls:\"filterItem tagItem\",style:{\"float\":\"left\"},listeners:{selectionchange:function(field,values,options){that.selectedTags=values,that._createStoreFilter()},scope:this}}]}),this.down(\"#filterContainer\").add(filterContainer)},_createStoreFilter:function(){this._destroyDynamicItems();var i,d1,d2,startId=\"startDate\",endId=\"endDate\";for(this._displayMask(),d1=new Date(Ext.getCmp(startId).getValue()),d2=new Date(Ext.getCmp(endId).getValue()),d1>d2&&(Ext.getCmp(startId).setValue(d2),Ext.getCmp(endId).setValue(d1),d1=new Date(Ext.getCmp(startId).getValue()),d2=new Date(Ext.getCmp(endId).getValue())),filter=Ext.create(\"Rally.data.QueryFilter\",{property:\"ActualEndDate\",operator:\">=\",value:d1.getFullYear()+\"-\"+(parseInt(d1.getMonth())+1)+\"-\"+d1.getDate()}).and(Ext.create(\"Rally.data.QueryFilter\",{property:\"ActualEndDate\",operator:\"<=\",value:d2.getFullYear()+\"-\"+(parseInt(d2.getMonth())+1)+\"-\"+d2.getDate()})),i=0;this.selectedTags.length>i;++i)filter=filter.and(Ext.create(\"Rally.data.QueryFilter\",{property:\"Tags.Name\",operator:\"=\",value:this.selectedTags[i].data.Name}));this._queryDataStore(filter)},_queryDataStore:function(filter){Ext.create(\"Rally.data.WsapiDataStore\",{config:{autoLoad:!0,workspace:this.getContext().getWorkspace().ObjectID,project:this.getContext().getProject().ObjectID,limit:\"Infinity\"},model:\"PortfolioItem/Feature\",filters:filter,sorters:[{property:\"ActualEndDate\",direction:\"ASC\"}],listeners:{load:this._processStoreData,scope:this},fetch:[\"Name,ActualStartDate,ActualEndDate,PreliminaryEstimate,FormattedID,Tags,DirectChildrenCount\"]})},_processStoreData:function(store,data,success){this.featureStore=store,this.featureStoreData=data,this.groupedSeries=[];var that=this,field=store.model.getField(\"PreliminaryEstimate\");field.getAllowedValueStore().load({scope:this,callback:function(records,operation,success){Ext.Array.each(records,function(val){var s=val.get(\"StringValue\");s&&that.groupedSeries.push({name:s,data:[],stack:\"qSizes\"})}),that.groupedSeries.push({name:\"N/A\",data:[],stack:\"qSizes\"}),that.continueStoreDataProcess(store,data,success)}})},continueStoreDataProcess:function(store,data,success){if(0===data.length){var item;return Ext.get(\"infoContainer\").setHTML(\"No Features found for given project / filter setting.\").show(),this._destroyDynamicItems(),Ext.getBody().unmask(),void 0}Ext.get(\"infoContainer\")&&Ext.get(\"infoContainer\").hide();var leadTime,i;for(this.chartData={totalCount:0,quarters:{},quarterCount:0,categories:[]},i=0;store.data.items.length>i;++i)leadTime=Rally.util.DateTime.getDifference(store.data.items[i].data.ActualEndDate,store.data.items[i].data.ActualStartDate,\"day\"),store.data.items[i].data.LeadTime=leadTime+\" days\",store.data.items[i].data.custPreliminaryEstimate=null===store.data.items[i].data.PreliminaryEstimate?\"N/A\":store.data.items[i].data.PreliminaryEstimate.Name,this._buildChartData(store,i);this._initAndDrawCharts(this.chartData)},_initAndDrawCharts:function(inputData){if(0!==inputData.totalCount){var throughput=[],i,qCount=0,currTotalCount=0,avgTotals=[],quarterAVGs=[];for(i in inputData.quarters)throughput.push(inputData.quarters[i].count),currTotalCount+=inputData.quarters[i].count,qCount++,avgTotals.push(Math.round(currTotalCount/qCount,2));for(i=0;inputData.quarterCount>i;++i)quarterAVGs.push(Math.round(inputData.totalCount/inputData.quarterCount,2));this.groupedSeries.unshift({name:\"Throughput\",data:throughput}),this.groupedSeries.push({type:\"spline\",name:\"Moving Average\",data:avgTotals,color:\"blue\",marker:{lineWidth:1,fillColor:\"red\"}}),this.groupedSeries.push({type:\"spline\",name:\"Average / Quarter\",data:quarterAVGs,color:\"purple\",marker:{lineWidth:1,fillColor:\"red\"}}),this.groupedSeries.push({name:\"Total Features: \"+inputData.totalCount,color:\"#fff\",stack:\"blank\"}),this._drawHorizontalBarChart(inputData.categories,this.groupedSeries)}},_buildChartData:function(store,i){var chartData=this.chartData,custPrelEstimate,endDate=new Date(store.data.items[i].data.ActualEndDate),quarterCat,s;if(custPrelEstimate=store.data.items[i].data.custPreliminaryEstimate,quarterCat=\"Q\"+Math.floor((endDate.getMonth()+3)/3)+\"-\"+endDate.getFullYear(),chartData.quarters[quarterCat]===void 0){chartData.quarters[quarterCat]={count:0,estimates:{},features:[]},chartData.categories.push(quarterCat);for(s in this.groupedSeries)this.groupedSeries[s].data.push(0);chartData.quarterCount++}for(chartData.quarters[quarterCat].features.push(store.data.items[i]),chartData.quarters[quarterCat].estimates[custPrelEstimate]===void 0&&(chartData.quarters[quarterCat].estimates[custPrelEstimate]=0),chartData.quarters[quarterCat].estimates[custPrelEstimate]++,chartData.quarters[quarterCat].count++,chartData.totalCount++,s=0;this.groupedSeries.length>s;++s)custPrelEstimate===this.groupedSeries[s].name&&(this.groupedSeries[s].data[chartData.quarterCount-1]=chartData.quarters[quarterCat].estimates[custPrelEstimate]);this.chartData=chartData},_drawBarChart:function(conf){this.dynamicItems[this.activeView][conf.id]!==void 0&&this.dynamicItems[this.activeView][conf.id].destroy();var that=this;this.dynamicItems[this.activeView][conf.id]=this.down(conf.targetContainer).add({xtype:\"rallychart\",id:conf.id,chartData:{series:conf.series},chartConfig:{plotOptions:{column:{stacking:that.stackType,cursor:\"pointer\",point:{events:{click:function(){var data=[],store,item,features=Rally.getApp().chartData.quarters[this.category].features;for(item in features)(\"Throughput\"===this.series.name||this.series.name===features[item].data.custPreliminaryEstimate)&&data.push(features[item].data);store=Ext.create(\"Rally.data.custom.Store\",{data:data}),Rally.getApp()._addFeatureGrid(store,\"featureGrid\",\"Throughput\"===this.series.name?\"Features ended in: \"+this.category:'Features with size \"'+this.series.name+'\" ended in: '+this.category)}}}}},chart:{plotBackgroundColor:null,plotBorderWidth:null,plotShadow:!1,type:conf.chartType},legend:{align:\"right\",verticalAlign:\"top\",x:0,y:100,layout:\"vertical\"},title:{text:conf.chartTitle},tooltip:{formatter:function(){return\"<b>\"+this.series.name+\" | \"+this.x+\"</b><br/>\"+\"<b>\"+this.y+\"</b> Features<br/><i>(Click to view Features)</i>\"}},yAxis:[{title:{text:conf.yAxisTitle}}],xAxis:[{title:{text:conf.xAxisTitle},categories:conf.xAxisCategories}]}}),this.down(\"#\"+conf.id)._unmask()},_drawHorizontalBarChart:function(categories,data){var conf={id:\"verticalBars\",targetContainer:\"#defaultChartContainer\",series:data,chartType:\"column\",chartTitle:\"Throughput by Quarters\",xAxisCategories:categories,xAxisTitle:\"Quarters\",yAxisTitle:\"Count\"};this._drawBarChart(conf),Ext.getBody().unmask()},_addFeatureGrid:function(store,id,title){this.dynamicItems[this.activeView][id]&&this.dynamicItems[this.activeView][id].destroy(),Rally.data.ModelFactory.getModel({type:\"PortfolioItem/Feature\",success:function(model){var featureGrid=this.down(\"#\"+this.activeView+\"_GridContainer\").add({xtype:\"rallygrid\",id:id,listeners:{render:function(){Ext.getBody().unmask()}},style:{marginTop:30},width:1200,model:model,store:store,title:title,columnCfgs:[{text:\"ID\",dataIndex:\"FormattedID\",width:60,renderer:function(value,style,item,rowIndex){return Ext.String.format(\"<a target='_top' href='{1}'>{0}</a>\",value,Rally.nav.Manager.getDetailUrl(item))}},{text:\"Name\",dataIndex:\"Name\",width:600},{text:\"Stories\",dataIndex:\"DirectChildrenCount\",width:60},\"ActualStartDate\",\"ActualEndDate\",{text:\"Preliminary Estimate\",dataIndex:\"custPreliminaryEstimate\"},{text:\"Lead Time\",dataIndex:\"LeadTime\"},\"Tags\"]});this.dynamicItems[this.activeView][id]=featureGrid},scope:this})},_destroyDynamicItems:function(){var item;for(item in this.dynamicItems[this.activeView])this.dynamicItems[this.activeView][item].destroy()},_displayMask:function(){Ext.getBody().mask(\"Report creation in progress...\")}});"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":25}},"text":"Ext.define(\"CustomApp\", {"},{"action":"insertText","range":{"start":{"row":0,"column":25},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":357,"column":0}},"lines":["    extend: \"Rally.app.App\",","    componentCls: \"app\",","    items: [{","        xtype: \"container\",","        itemId: \"nav\",","        id: \"nav\",","        html: '<a href=\"#\" onClick=\"Rally.getApp().setStacking();return false;\">Change stacking type</a>'","    }, {","        xtype: \"container\",","        itemId: \"filterContainer\",","        id: \"filterContainer\"","    }, {","        xtype: \"container\",","        itemId: \"infoContainer\",","        id: \"infoContainer\",","        hidden: !0","    }, {","        xtype: \"container\",","        itemId: \"firstReport\",","        id: \"firstReport\",","        items: [{","            xtype: \"container\",","            itemId: \"defaultChartContainer\",","            id: \"defaultChartContainer\"","        }, {","            xtype: \"container\",","            itemId: \"firstReport_GridContainer\",","            id: \"firstReport_GridContainer\"","        }]","    }],","    launch: function() {","        this.activeView = \"firstReport\", this.stackType = \"normal\", this._init(), this._createFilterContainer()","    },","    setStacking: function() {","        this.stackType = null === this.stackType ? \"normal\" : null, this._init(), this._processStoreData(this.featureStore, this.featureStoreData)","    },","    _init: function() {","        if (this._displayMask(), this.dynamicItems === void 0 && (this.dynamicItems = {}), this.dynamicItems[this.activeView] === void 0) this.dynamicItems[this.activeView] = {};","        else {","            var item;","            for (item in this.dynamicItems[this.activeView]) this.dynamicItems[this.activeView][item].destroy()","        }","    },","    _createFilterContainer: function() {","        var that = this,","            d = new Date,","            filterContainer;","        this.selectedTags = [], d.setMonth(d.getMonth() - 12), filterContainer = Ext.create(\"Ext.Container\", {","            items: [{","                xtype: \"rallydatefield\",","                id: \"startDate\",","                cls: \"filterItem\",","                fieldLabel: \"Features ended between \",","                value: d,","                labelWidth: 150,","                style: {","                    \"float\": \"left\"","                },","                listeners: {","                    select: this._createStoreFilter,","                    scope: this","                }","            }, {","                xtype: \"rallydatefield\",","                id: \"endDate\",","                cls: \"filterItem\",","                fieldLabel: \" and \",","                labelWidth: 30,","                style: {","                    \"float\": \"left\"","                },","                value: new Date,","                listeners: {","                    afterrender: this._createStoreFilter,","                    select: this._createStoreFilter,","                    scope: this","                }","            }, {","                fieldLabel: \"Choose a Tag\",","                labelWidth: 100,","                width: 300,","                xtype: \"rallytagpicker\",","                id: \"tagPicker\",","                cls: \"filterItem tagItem\",","                style: {","                    \"float\": \"left\"","                },","                listeners: {","                    selectionchange: function(field, values, options) {","                        that.selectedTags = values, that._createStoreFilter()","                    },","                    scope: this","                }","            }]","        }), this.down(\"#filterContainer\").add(filterContainer)","    },","    _createStoreFilter: function() {","        this._destroyDynamicItems();","        var i, d1, d2, startId = \"startDate\",","            endId = \"endDate\";","        for (this._displayMask(), d1 = new Date(Ext.getCmp(startId).getValue()), d2 = new Date(Ext.getCmp(endId).getValue()), d1 > d2 && (Ext.getCmp(startId).setValue(d2), Ext.getCmp(endId).setValue(d1), d1 = new Date(Ext.getCmp(startId).getValue()), d2 = new Date(Ext.getCmp(endId).getValue())), filter = Ext.create(\"Rally.data.QueryFilter\", {","            property: \"ActualEndDate\",","            operator: \">=\",","            value: d1.getFullYear() + \"-\" + (parseInt(d1.getMonth()) + 1) + \"-\" + d1.getDate()","        }).and(Ext.create(\"Rally.data.QueryFilter\", {","            property: \"ActualEndDate\",","            operator: \"<=\",","            value: d2.getFullYear() + \"-\" + (parseInt(d2.getMonth()) + 1) + \"-\" + d2.getDate()","        })), i = 0; this.selectedTags.length > i; ++i) filter = filter.and(Ext.create(\"Rally.data.QueryFilter\", {","            property: \"Tags.Name\",","            operator: \"=\",","            value: this.selectedTags[i].data.Name","        }));","        this._queryDataStore(filter)","    },","    _queryDataStore: function(filter) {","        Ext.create(\"Rally.data.WsapiDataStore\", {","            config: {","                autoLoad: !0,","                workspace: this.getContext().getWorkspace().ObjectID,","                project: this.getContext().getProject().ObjectID,","                limit: \"Infinity\"","            },","            model: \"PortfolioItem/Feature\",","            filters: filter,","            sorters: [{","                property: \"ActualEndDate\",","                direction: \"ASC\"","            }],","            listeners: {","                load: this._processStoreData,","                scope: this","            },","            fetch: [\"Name,ActualStartDate,ActualEndDate,PreliminaryEstimate,FormattedID,Tags,DirectChildrenCount\"]","        })","    },","    _processStoreData: function(store, data, success) {","        this.featureStore = store, this.featureStoreData = data, this.groupedSeries = [];","        var that = this,","            field = store.model.getField(\"PreliminaryEstimate\");","        field.getAllowedValueStore().load({","            scope: this,","            callback: function(records, operation, success) {","                Ext.Array.each(records, function(val) {","                    var s = val.get(\"StringValue\");","                    s && that.groupedSeries.push({","                        name: s,","                        data: [],","                        stack: \"qSizes\"","                    })","                }), that.groupedSeries.push({","                    name: \"N/A\",","                    data: [],","                    stack: \"qSizes\"","                }), that.continueStoreDataProcess(store, data, success)","            }","        })","    },","    continueStoreDataProcess: function(store, data, success) {","        if (0 === data.length) {","            var item;","            return Ext.get(\"infoContainer\").setHTML(\"No Features found for given project / filter setting.\").show(), this._destroyDynamicItems(), Ext.getBody().unmask(), void 0","        }","        Ext.get(\"infoContainer\") && Ext.get(\"infoContainer\").hide();","        var leadTime, i;","        for (this.chartData = {","            totalCount: 0,","            quarters: {},","            quarterCount: 0,","            categories: []","        }, i = 0; store.data.items.length > i; ++i) leadTime = Rally.util.DateTime.getDifference(store.data.items[i].data.ActualEndDate, store.data.items[i].data.ActualStartDate, \"day\"), store.data.items[i].data.LeadTime = leadTime + \" days\", store.data.items[i].data.custPreliminaryEstimate = null === store.data.items[i].data.PreliminaryEstimate ? \"N/A\" : store.data.items[i].data.PreliminaryEstimate.Name, this._buildChartData(store, i);","        this._initAndDrawCharts(this.chartData)","    },","    _initAndDrawCharts: function(inputData) {","        if (0 !== inputData.totalCount) {","            var throughput = [],","                i, qCount = 0,","                currTotalCount = 0,","                avgTotals = [],","                quarterAVGs = [];","            for (i in inputData.quarters) throughput.push(inputData.quarters[i].count), currTotalCount += inputData.quarters[i].count, qCount++, avgTotals.push(Math.round(currTotalCount / qCount, 2));","            for (i = 0; inputData.quarterCount > i; ++i) quarterAVGs.push(Math.round(inputData.totalCount / inputData.quarterCount, 2));","            this.groupedSeries.unshift({","                name: \"Throughput\",","                data: throughput","            }), this.groupedSeries.push({","                type: \"spline\",","                name: \"Moving Average\",","                data: avgTotals,","                color: \"blue\",","                marker: {","                    lineWidth: 1,","                    fillColor: \"red\"","                }","            }), this.groupedSeries.push({","                type: \"spline\",","                name: \"Average / Quarter\",","                data: quarterAVGs,","                color: \"purple\",","                marker: {","                    lineWidth: 1,","                    fillColor: \"red\"","                }","            }), this.groupedSeries.push({","                name: \"Total Features: \" + inputData.totalCount,","                color: \"#fff\",","                stack: \"blank\"","            }), this._drawHorizontalBarChart(inputData.categories, this.groupedSeries)","        }","    },","    _buildChartData: function(store, i) {","        var chartData = this.chartData,","            custPrelEstimate, endDate = new Date(store.data.items[i].data.ActualEndDate),","            quarterCat, s;","        if (custPrelEstimate = store.data.items[i].data.custPreliminaryEstimate, quarterCat = \"Q\" + Math.floor((endDate.getMonth() + 3) / 3) + \"-\" + endDate.getFullYear(), chartData.quarters[quarterCat] === void 0) {","            chartData.quarters[quarterCat] = {","                count: 0,","                estimates: {},","                features: []","            }, chartData.categories.push(quarterCat);","            for (s in this.groupedSeries) this.groupedSeries[s].data.push(0);","            chartData.quarterCount++","        }","        for (chartData.quarters[quarterCat].features.push(store.data.items[i]), chartData.quarters[quarterCat].estimates[custPrelEstimate] === void 0 && (chartData.quarters[quarterCat].estimates[custPrelEstimate] = 0), chartData.quarters[quarterCat].estimates[custPrelEstimate] ++, chartData.quarters[quarterCat].count++, chartData.totalCount++, s = 0; this.groupedSeries.length > s; ++s) custPrelEstimate === this.groupedSeries[s].name && (this.groupedSeries[s].data[chartData.quarterCount - 1] = chartData.quarters[quarterCat].estimates[custPrelEstimate]);","        this.chartData = chartData","    },","    _drawBarChart: function(conf) {","        this.dynamicItems[this.activeView][conf.id] !== void 0 && this.dynamicItems[this.activeView][conf.id].destroy();","        var that = this;","        this.dynamicItems[this.activeView][conf.id] = this.down(conf.targetContainer).add({","            xtype: \"rallychart\",","            id: conf.id,","            chartData: {","                series: conf.series","            },","            chartConfig: {","                plotOptions: {","                    column: {","                        stacking: that.stackType,","                        cursor: \"pointer\",","                        point: {","                            events: {","                                click: function() {","                                    var data = [],","                                        store, item, features = Rally.getApp().chartData.quarters[this.category].features;","                                    for (item in features)(\"Throughput\" === this.series.name || this.series.name === features[item].data.custPreliminaryEstimate) && data.push(features[item].data);","                                    store = Ext.create(\"Rally.data.custom.Store\", {","                                        data: data","                                    }), Rally.getApp()._addFeatureGrid(store, \"featureGrid\", \"Throughput\" === this.series.name ? \"Features ended in: \" + this.category : 'Features with size \"' + this.series.name + '\" ended in: ' + this.category)","                                }","                            }","                        }","                    }","                },","                chart: {","                    plotBackgroundColor: null,","                    plotBorderWidth: null,","                    plotShadow: !1,","                    type: conf.chartType","                },","                legend: {","                    align: \"right\",","                    verticalAlign: \"top\",","                    x: 0,","                    y: 100,","                    layout: \"vertical\"","                },","                title: {","                    text: conf.chartTitle","                },","                tooltip: {","                    formatter: function() {","                        return \"<b>\" + this.series.name + \" | \" + this.x + \"</b><br/>\" + \"<b>\" + this.y + \"</b> Features<br/><i>(Click to view Features)</i>\"","                    }","                },","                yAxis: [{","                    title: {","                        text: conf.yAxisTitle","                    }","                }],","                xAxis: [{","                    title: {","                        text: conf.xAxisTitle","                    },","                    categories: conf.xAxisCategories","                }]","            }","        }), this.down(\"#\" + conf.id)._unmask()","    },","    _drawHorizontalBarChart: function(categories, data) {","        var conf = {","            id: \"verticalBars\",","            targetContainer: \"#defaultChartContainer\",","            series: data,","            chartType: \"column\",","            chartTitle: \"Throughput by Quarters\",","            xAxisCategories: categories,","            xAxisTitle: \"Quarters\",","            yAxisTitle: \"Count\"","        };","        this._drawBarChart(conf), Ext.getBody().unmask()","    },","    _addFeatureGrid: function(store, id, title) {","        this.dynamicItems[this.activeView][id] && this.dynamicItems[this.activeView][id].destroy(), Rally.data.ModelFactory.getModel({","            type: \"PortfolioItem/Feature\",","            success: function(model) {","                var featureGrid = this.down(\"#\" + this.activeView + \"_GridContainer\").add({","                    xtype: \"rallygrid\",","                    id: id,","                    listeners: {","                        render: function() {","                            Ext.getBody().unmask()","                        }","                    },","                    style: {","                        marginTop: 30","                    },","                    width: 1200,","                    model: model,","                    store: store,","                    title: title,","                    columnCfgs: [{","                        text: \"ID\",","                        dataIndex: \"FormattedID\",","                        width: 60,","                        renderer: function(value, style, item, rowIndex) {","                            return Ext.String.format(\"<a target='_top' href='{1}'>{0}</a>\", value, Rally.nav.Manager.getDetailUrl(item))","                        }","                    }, {","                        text: \"Name\",","                        dataIndex: \"Name\",","                        width: 600","                    }, {","                        text: \"Stories\",","                        dataIndex: \"DirectChildrenCount\",","                        width: 60","                    }, \"ActualStartDate\", \"ActualEndDate\", {","                        text: \"Preliminary Estimate\",","                        dataIndex: \"custPreliminaryEstimate\"","                    }, {","                        text: \"Lead Time\",","                        dataIndex: \"LeadTime\"","                    }, \"Tags\"]","                });","                this.dynamicItems[this.activeView][id] = featureGrid","            },","            scope: this","        })","    },","    _destroyDynamicItems: function() {","        var item;","        for (item in this.dynamicItems[this.activeView]) this.dynamicItems[this.activeView][item].destroy()","    },","    _displayMask: function() {","        Ext.getBody().mask(\"Report creation in progress...\")","    }"]},{"action":"insertText","range":{"start":{"row":357,"column":0},"end":{"row":357,"column":3}},"text":"});"}]}]]},"ace":{"folds":[],"scrolltop":3120,"scrollleft":4,"selection":{"start":{"row":189,"column":32},"end":{"row":189,"column":32},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":182,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1408525589458}